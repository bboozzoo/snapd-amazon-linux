From 94c0c38e5779a9ae53e6fbc6643e65dc1bb91ae9 Mon Sep 17 00:00:00 2001
From: Michael Vogt <mvo@ubuntu.com>
Date: Mon, 15 Jul 2019 13:48:06 +0200
Subject: [PATCH 1/4] snap-confine: fallback gracefully on a cgroup v2 only
 system

On a cgroup v2 only system we cannot use certain features like
freezer or pid cgroups yet. In order to not die() when we run
on such systems this PR implements detection and skipping of
those.

This will have to be done "properly" but for now it ensures
that snaps continue to run on cgroup v2 only systems.
---
 cmd/libsnap-confine-private/cgroup-support.c | 16 ++++++++++++++++
 cmd/libsnap-confine-private/cgroup-support.h |  7 +++++++
 cmd/snap-confine/ns-support.c                |  3 ++-
 cmd/snap-confine/snap-confine.c              | 16 +++++++++++-----
 4 files changed, 36 insertions(+), 6 deletions(-)

diff --git a/cmd/libsnap-confine-private/cgroup-support.c b/cmd/libsnap-confine-private/cgroup-support.c
index 03dc4b160f8..c61d516a474 100644
--- a/cmd/libsnap-confine-private/cgroup-support.c
+++ b/cmd/libsnap-confine-private/cgroup-support.c
@@ -25,6 +25,7 @@
 #include <string.h>
 #include <sys/stat.h>
 #include <sys/types.h>
+#include <sys/vfs.h>
 #include <unistd.h>
 
 #include "cleanup-funcs.h"
@@ -66,3 +67,18 @@ void sc_cgroup_create_and_join(const char *parent, const char *name, pid_t pid)
     }
     debug("moved process %ld to cgroup hierarchy %s/%s", (long)pid, parent, name);
 }
+
+static const char *cgroup_dir = "/sys/fs/cgroup";
+// from statfs(2)
+static const int CGROUP2_SUPER_MAGIC =  0x63677270;
+
+bool sc_cgroup_is_v2() {
+    struct statfs buf;
+
+    int err = statfs(cgroup_dir, &buf);
+    if (err == 0 && buf.f_type == CGROUP2_SUPER_MAGIC) {
+       fprintf(stderr, "WARNING: cgroup v2 is not fully supported yet\n");
+       return true;
+    }
+    return false;
+}
diff --git a/cmd/libsnap-confine-private/cgroup-support.h b/cmd/libsnap-confine-private/cgroup-support.h
index 33e5ccc90bc..f7f0ebaf9b4 100644
--- a/cmd/libsnap-confine-private/cgroup-support.h
+++ b/cmd/libsnap-confine-private/cgroup-support.h
@@ -19,6 +19,7 @@
 #define SC_CGROUP_SUPPORT_H
 
 #include <fcntl.h>
+#include <stdbool.h>
 
 /**
  * sc_cgroup_create_and_join joins, perhaps creating, a cgroup hierarchy.
@@ -30,4 +31,10 @@
  **/
 void sc_cgroup_create_and_join(const char *parent, const char *name, pid_t pid);
 
+/**
+ * sc_cgroup_is_v2() returns true if running on cgroups v2
+ *
+ **/
+bool sc_cgroup_is_v2(void);
+
 #endif
diff --git a/cmd/snap-confine/ns-support.c b/cmd/snap-confine/ns-support.c
index 672f18b6a0c..c3d958b1136 100644
--- a/cmd/snap-confine/ns-support.c
+++ b/cmd/snap-confine/ns-support.c
@@ -39,6 +39,7 @@
 #include <unistd.h>
 
 #include "../libsnap-confine-private/cgroup-freezer-support.h"
+#include "../libsnap-confine-private/cgroup-support.h"
 #include "../libsnap-confine-private/classic.h"
 #include "../libsnap-confine-private/cleanup-funcs.h"
 #include "../libsnap-confine-private/infofile.h"
@@ -486,7 +487,7 @@ static int sc_inspect_and_maybe_discard_stale_ns(int mnt_fd,
 		debug("preserved mount is not stale, reusing");
 		return 0;
 	case SC_DISCARD_SHOULD:
-		if (sc_cgroup_freezer_occupied(inv->snap_instance)) {
+                if (!sc_cgroup_is_v2() && sc_cgroup_freezer_occupied(inv->snap_instance)) {
 			// Some processes are still using the namespace so we cannot discard it
 			// as that would fracture the view that the set of processes inside
 			// have on what is mounted.
diff --git a/cmd/snap-confine/snap-confine.c b/cmd/snap-confine/snap-confine.c
index ac2f0375df8..a4f49883262 100644
--- a/cmd/snap-confine/snap-confine.c
+++ b/cmd/snap-confine/snap-confine.c
@@ -35,6 +35,7 @@
 #include "../libsnap-confine-private/apparmor-support.h"
 #include "../libsnap-confine-private/cgroup-freezer-support.h"
 #include "../libsnap-confine-private/cgroup-pids-support.h"
+#include "../libsnap-confine-private/cgroup-support.h"
 #include "../libsnap-confine-private/classic.h"
 #include "../libsnap-confine-private/cleanup-funcs.h"
 #include "../libsnap-confine-private/feature.h"
@@ -574,8 +575,11 @@ static void enter_non_classic_execution_environment(sc_invocation * inv,
 
 	/** Populate and join the device control group. */
 	struct snappy_udev udev_s;
-	if (snappy_udev_init(inv->security_tag, &udev_s) == 0)
-		setup_devices_cgroup(inv->security_tag, &udev_s);
+	if (snappy_udev_init(inv->security_tag, &udev_s) == 0) {
+		if (sc_cgroup_is_v2()) {
+			setup_devices_cgroup(inv->security_tag, &udev_s);
+		}
+	}
 	snappy_udev_cleanup(&udev_s);
 
 	/**
@@ -675,9 +679,11 @@ static void enter_non_classic_execution_environment(sc_invocation * inv,
 			die("cannot set effective group id to root");
 		}
 	}
-	sc_cgroup_freezer_join(inv->snap_instance, getpid());
-	if (sc_feature_enabled(SC_FEATURE_REFRESH_APP_AWARENESS)) {
-		sc_cgroup_pids_join(inv->security_tag, getpid());
+	if (!sc_cgroup_is_v2()) {
+		sc_cgroup_freezer_join(inv->snap_instance, getpid());
+		if (sc_feature_enabled(SC_FEATURE_REFRESH_APP_AWARENESS)) {
+			sc_cgroup_pids_join(inv->security_tag, getpid());
+		}
 	}
 	if (geteuid() == 0 && real_gid != 0) {
 		if (setegid(real_gid) != 0) {

From a0d617f5404f63e7792394d9609cbae83f2aaedc Mon Sep 17 00:00:00 2001
From: Michael Vogt <michael.vogt@gmail.com>
Date: Mon, 15 Jul 2019 21:03:40 +0200
Subject: [PATCH 2/4] snap-confine: fix snappy_udev_init() check

Co-Authored-By: Ian Johnson <person.uwsome@gmail.com>
---
 cmd/snap-confine/snap-confine.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/cmd/snap-confine/snap-confine.c b/cmd/snap-confine/snap-confine.c
index a4f49883262..e1d4905395f 100644
--- a/cmd/snap-confine/snap-confine.c
+++ b/cmd/snap-confine/snap-confine.c
@@ -576,7 +576,7 @@ static void enter_non_classic_execution_environment(sc_invocation * inv,
 	/** Populate and join the device control group. */
 	struct snappy_udev udev_s;
 	if (snappy_udev_init(inv->security_tag, &udev_s) == 0) {
-		if (sc_cgroup_is_v2()) {
+		if (!sc_cgroup_is_v2()) {
 			setup_devices_cgroup(inv->security_tag, &udev_s);
 		}
 	}

From 64e2759c455ef31b48cbae1225b883e84f6f4a6c Mon Sep 17 00:00:00 2001
From: Michael Vogt <mvo@ubuntu.com>
Date: Mon, 22 Jul 2019 17:28:56 +0200
Subject: [PATCH 3/4] cgroup-support.c: define CGRUOP2_SUPER_MAGIC if not
 defined and add comment around sc_cgroup_is_v2

---
 cmd/libsnap-confine-private/cgroup-support.c | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/cmd/libsnap-confine-private/cgroup-support.c b/cmd/libsnap-confine-private/cgroup-support.c
index c61d516a474..a790f3032a6 100644
--- a/cmd/libsnap-confine-private/cgroup-support.c
+++ b/cmd/libsnap-confine-private/cgroup-support.c
@@ -69,9 +69,15 @@ void sc_cgroup_create_and_join(const char *parent, const char *name, pid_t pid)
 }
 
 static const char *cgroup_dir = "/sys/fs/cgroup";
+
 // from statfs(2)
-static const int CGROUP2_SUPER_MAGIC =  0x63677270;
+#ifndef CGRUOP2_SUPER_MAGIC
+#define CGROUP2_SUPER_MAGIC =  0x63677270;
+#endif
 
+// Detect if we are running in cgroup v2 unified mode (as opposed to
+// hybrid or legacy) The algorithm is described in
+// https://systemd.io/CGROUP_DELEGATION.html
 bool sc_cgroup_is_v2() {
     struct statfs buf;
 

From 5705fcd6c6c684cffbe54dda5cef8b3aa918e838 Mon Sep 17 00:00:00 2001
From: Michael Vogt <michael.vogt@gmail.com>
Date: Tue, 23 Jul 2019 15:15:16 +0200
Subject: [PATCH 4/4] cmd/libsnap-confine-private/cgroup-support.c: fix
 incorrect #define

Co-Authored-By: Maciej Borzecki <maciek.borzecki@gmail.com>
---
 cmd/libsnap-confine-private/cgroup-support.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/cmd/libsnap-confine-private/cgroup-support.c b/cmd/libsnap-confine-private/cgroup-support.c
index a790f3032a6..ee955b9441e 100644
--- a/cmd/libsnap-confine-private/cgroup-support.c
+++ b/cmd/libsnap-confine-private/cgroup-support.c
@@ -72,7 +72,7 @@ static const char *cgroup_dir = "/sys/fs/cgroup";
 
 // from statfs(2)
 #ifndef CGRUOP2_SUPER_MAGIC
-#define CGROUP2_SUPER_MAGIC =  0x63677270;
+#define CGROUP2_SUPER_MAGIC 0x63677270
 #endif
 
 // Detect if we are running in cgroup v2 unified mode (as opposed to
