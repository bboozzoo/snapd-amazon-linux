project: snapd-amazon-linux

path: /home/spread

environment:
    TESTSLIB: /home/spread/spread/tests/lib
    PATH: $PATH:/home/spread/spread/tests/lib/bin
    LANG: "C.UTF-8"
    LANGUAGE: "en"
    BASE_REPO_URL: https://bboozzoo.github.io/snapd-amazon-linux

backends:
    google:
        key: "$(HOST: echo $SPREAD_GOOGLE_KEY)"
        location: snapd-spread/us-east1-b
        halt-timeout: 2h
        systems:
            - amazon-linux-2-64:
                  workers: 1
                  storage: preserve-size
            - amazon-linux-2023-64:
                  workers: 1
                  storage: preserve-size

    garden:
        type: adhoc
        allocate: |
            # Spread automatically injects /snap/bin to PATH. When we are
            # running from the image-garden snap then SPREAD_HOST_PATH is the
            # original path before such modifications were applied. Snap
            # applications cannot normally run /snap/bin/* entry-points
            # successfully so re-set PATH to the original value, as provided by
            # snapcraft.
            if [ -n "${SPREAD_HOST_PATH-}" ]; then
                PATH="${SPREAD_HOST_PATH}"
            fi
            # Spread does not expose any settings to ad-hoc backends.
            export QEMU_MEM_OPTION="-m 3072"
            export QEMU_SMP_OPTION="-smp 4"
            # Convert convention of system names used by snapd to corresponding image-garden name:
            # - amazon-linux-2023-64    => amazonlinux-cloud-2023-$(uname -m)
            # - arch-linux-64           => archlinux-cloud.$(uname -m)
            # - centos-10-64            => centos-cloud-10.$(uname -m)
            # - debian-sid-64           => debian-cloud-sid.$(uname -m)
            # - fedora-42-64            => fedora-cloud-42.$(uname -m)
            # - opensuse-tumbleweed-64  => opensuse-cloud-tumbleweed.$(uname -m)
            # - ubuntu-24.04-64         => ubuntu-cloud-24.04.$(uname -m)
            # - ubuntu-core-24-64       => ubuntu-cloud-24.04.$(uname -m)
            exec image-garden allocate "$(echo "$SPREAD_SYSTEM" | sed \
              -e 's/\(\w\+\)-linux/\1linux/' \
              -e 's/\(\w\+\)/\1-cloud/' \
              -e 's/-64$/.'"$(uname -m)"'/g')"
        discard: |
            # Spread automatically injects /snap/bin to PATH. When we are
            # running from the image-garden snap then SPREAD_HOST_PATH is the
            # original path before such modifications were applied. Snap
            # applications cannot normally run /snap/bin/* entry-points
            # successfully so re-set PATH to the original value, as provided by
            # snapcraft.
            if [ -n "${SPREAD_HOST_PATH-}" ]; then
                PATH="${SPREAD_HOST_PATH}"
            fi
            # Stop the running qemu instance corresponding to the given address.
            exec image-garden discard "$SPREAD_SYSTEM_ADDRESS"
        systems:
            - amazon-linux-2-64:
                  username: root
                  password: root
            - amazon-linux-2023-64:
                  username: root
                  password: root

path: /home/spread

exclude:
    - .git

kill-timeout: 20m

prepare: |
  yum install -y yum-utils rpm-build
  echo "prepare"
  if [ "$SPREAD_REBOOT" = "0" ]; then
      case "$SPREAD_SYSTEM" in
          amazon-linux-2023-*)
              # TODO make this automatic
              dnf upgrade --releasever=latest -y
              REBOOT
              ;;
      esac
  fi

prepare-each: |
  echo "prepare each"

restore: |
  echo "restore"
restore-each: |
  echo "restore each"

suites:
  spread/prebuilt/:
    summary: Run tests with prebuilt repo tarball
    details: |
      Run spread tests with prebuilt repository tarball, typically obtained by
      downloading build artifacts form a PR, or when built locally with `tool
      createrepo`.
    prepare: |
      # set up a place to unpack the repo
      mkdir -p "$SPREAD_PATH/repo-unpacked"
      case "$SPREAD_SYSTEM" in
      amazon-linux-2-*)
          repo_file=amazon-linux-2-repo.tar.xz
          target=amazonlinux:2
          ;;
      amazon-linux-2023-*)
          repo_file=amazon-linux-2023-repo.tar.xz
          target=amazonlinux:2023
          ;;
      *)
          echo "unsupported $SPREAD_SYSTEM system"
          exit 1
          ;;
      esac
      tar -C "$SPREAD_PATH/repo-unpacked" -xvf "$SPREAD_PATH/$repo_file"
      # unpack it, the actual repository is under $TOPDIR/repo
      TARGET="$target" "$SPREAD_PATH/tool" repoconf "file://$SPREAD_PATH/repo-unpacked/repo" > "$SPREAD_PATH/spread.repo"
      cp -av "$SPREAD_PATH/spread.repo" /etc/yum.repos.d/
      # install snapd
      yum install -y snapd
      systemctl start snapd.socket
      # wait for snapd to become ready
      snap wait system seed.loaded

    restore: |
      yum erase -y snapd snap-confine
      rm -f /etc/yum.repos.d/spread.repo
      rm -rfv "$SPREAD_PATH/repo-unpacked"

  spread/prebuilt-repo/:
    summary: Run tests with repository packages
    details: |
      Run tests with repository packages hosted at ${BASE_REPO_URL} (typically
      github pages of the repository}.
    prepare: |
      # set up a place to unpack the repo
      case "$SPREAD_SYSTEM" in
      amazon-linux-2-*)
          repo_suffix=amzn2
          ;;
      amazon-linux-2023-*)
          repo_suffix=al2023
          ;;
      *)
          echo "unsupported $SPREAD_SYSTEM system"
          exit 1
          ;;
      esac
      wget -O /etc/yum.repos.d/snapd.repo ${BASE_REPO_URL}/${repo_suffix}/snapd.repo
      # install snapd
      yum install -y snapd
      systemctl start snapd.socket
      # wait for snapd to become ready
      snap wait system seed.loaded

    restore: |
      yum erase -y snapd snap-confine
      rm -f /etc/yum.repos.d/snapd.repo

  spread/build/:
    summary: package build
