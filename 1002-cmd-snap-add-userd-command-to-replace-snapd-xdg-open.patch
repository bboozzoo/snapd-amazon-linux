From a0c130ca5afe06b42fcb887585d4b04d51224c5b Mon Sep 17 00:00:00 2001
From: Simon Fels <morphis@gravedo.de>
Date: Tue, 29 Aug 2017 01:35:04 +0200
Subject: [PATCH 1002/1002] cmd/snap: add userd command to replace
 snapd-xdg-open (#3260)

Based on discussion from
https://forum.snapcraft.io/t/integrate-snapd-xdg-open-into-snapd/100
---
 .gitignore                                 |   5 ++
 cmd/snap/cmd_userd.go                      |  74 ++++++++++++++++++++
 cmd/snap/cmd_userd_test.go                 |  70 ++++++++++++++++++
 data/Makefile                              |   3 +
 data/dbus/Makefile                         |  31 ++++++++
 data/dbus/io.snapcraft.Launcher.service.in |   3 +
 interfaces/builtin/unity7.go               |  16 +++++
 testutil/dbustest.go                       |  69 ++++++++++++++++++
 userd/launcher.go                          |  88 +++++++++++++++++++++++
 userd/launcher_test.go                     |  81 +++++++++++++++++++++
 userd/userd.go                             | 109 +++++++++++++++++++++++++++++
 vendor/vendor.json                         |  12 +++-
 12 files changed, 558 insertions(+), 3 deletions(-)
 create mode 100644 cmd/snap/cmd_userd.go
 create mode 100644 cmd/snap/cmd_userd_test.go
 create mode 100644 data/Makefile
 create mode 100644 data/dbus/Makefile
 create mode 100644 data/dbus/io.snapcraft.Launcher.service.in
 create mode 100644 testutil/dbustest.go
 create mode 100644 userd/launcher.go
 create mode 100644 userd/launcher_test.go
 create mode 100644 userd/userd.go

diff --git a/.gitignore b/.gitignore
index b9f8c3fdb..d48609e2b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -35,6 +35,11 @@ cmd/*/*.[1-9]
 data/systemd/*.service
 data/info
 
+# auto-generated dbus services
+data/dbus/*.service
+
+data/info
+
 # test-driver
 *.log
 *.trs
diff --git a/cmd/snap/cmd_userd.go b/cmd/snap/cmd_userd.go
new file mode 100644
index 000000000..17b75c5ab
--- /dev/null
+++ b/cmd/snap/cmd_userd.go
@@ -0,0 +1,74 @@
+// -*- Mode: Go; indent-tabs-mode: t -*-
+
+/*
+ * Copyright (C) 2017 Canonical Ltd
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+package main
+
+import (
+	"fmt"
+	"os"
+	"os/signal"
+	"syscall"
+
+	"github.com/jessevdk/go-flags"
+
+	"github.com/snapcore/snapd/i18n"
+	"github.com/snapcore/snapd/userd"
+)
+
+type cmdUserd struct {
+	userd userd.Userd
+}
+
+var shortUserdHelp = i18n.G("Start the userd service")
+var longUserdHelp = i18n.G("The userd command starts the snap user session service.")
+
+func init() {
+	cmd := addCommand("userd",
+		shortAbortHelp,
+		longAbortHelp,
+		func() flags.Commander {
+			return &cmdUserd{}
+		},
+		nil,
+		[]argDesc{},
+	)
+	cmd.hidden = true
+}
+
+func (x *cmdUserd) Execute(args []string) error {
+	if len(args) > 0 {
+		return ErrExtraArgs
+	}
+
+	if err := x.userd.Init(); err != nil {
+		return err
+	}
+	x.userd.Start()
+
+	ch := make(chan os.Signal)
+	signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM, syscall.SIGUSR1)
+	select {
+	case sig := <-ch:
+		fmt.Fprintf(Stdout, "Exiting on %s.\n", sig)
+	case <-x.userd.Dying():
+		// something called Stop()
+	}
+
+	return x.userd.Stop()
+}
diff --git a/cmd/snap/cmd_userd_test.go b/cmd/snap/cmd_userd_test.go
new file mode 100644
index 000000000..ec134a205
--- /dev/null
+++ b/cmd/snap/cmd_userd_test.go
@@ -0,0 +1,70 @@
+// -*- Mode: Go; indent-tabs-mode: t -*-
+
+/*
+ * Copyright (C) 2016 Canonical Ltd
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+package main_test
+
+import (
+	"os"
+	"syscall"
+	"time"
+
+	. "gopkg.in/check.v1"
+
+	snap "github.com/snapcore/snapd/cmd/snap"
+	"github.com/snapcore/snapd/testutil"
+)
+
+type userdSuite struct {
+	BaseSnapSuite
+	testutil.DBusTest
+}
+
+var _ = Suite(&userdSuite{})
+
+func (s *userdSuite) TestUserdBadCommandline(c *C) {
+	_, err := snap.Parser().ParseArgs([]string{"userd", "extra-arg"})
+	c.Assert(err, ErrorMatches, "too many arguments for command")
+}
+
+func (s *userdSuite) TestUserd(c *C) {
+	go func() {
+		defer func() {
+			me, err := os.FindProcess(os.Getpid())
+			c.Assert(err, IsNil)
+			me.Signal(syscall.SIGUSR1)
+		}()
+
+		needle := "io.snapcraft.Launcher"
+		for i := 0; i < 10; i++ {
+			for _, objName := range s.SessionBus.Names() {
+				if objName == needle {
+					return
+				}
+				time.Sleep(1 * time.Second)
+			}
+
+		}
+		c.Fatalf("%s does not appeared on the bus", needle)
+	}()
+
+	rest, err := snap.Parser().ParseArgs([]string{"userd"})
+	c.Assert(err, IsNil)
+	c.Check(rest, DeepEquals, []string{})
+	c.Check(s.Stdout(), Equals, "Exiting on user defined signal 1.\n")
+}
diff --git a/data/Makefile b/data/Makefile
new file mode 100644
index 000000000..caece8c0c
--- /dev/null
+++ b/data/Makefile
@@ -0,0 +1,3 @@
+all install clean:
+	$(MAKE) -C systemd $@
+	$(MAKE) -C dbus $@
diff --git a/data/dbus/Makefile b/data/dbus/Makefile
new file mode 100644
index 000000000..66cc14e86
--- /dev/null
+++ b/data/dbus/Makefile
@@ -0,0 +1,31 @@
+#
+# Copyright (C) 2017 Canonical Ltd
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 3 as
+# published by the Free Software Foundation.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+BINDIR := /usr/bin
+DBUSSERVICESDIR := /usr/share/dbus-1/services
+
+SERVICES_GENERATED := $(patsubst %.service.in,%.service,$(wildcard *.service.in))
+SERVICES := ${SERVICES_GENERATED}
+
+%.service: %.service.in
+	cat $< | sed 's:@bindir@:${BINDIR}:g' | cat > $@
+
+all: ${SERVICES}
+
+install: ${SERVICES}
+	install -D -m 0644 -t ${DESTDIR}/${DBUSSERVICESDIR} $^
+
+clean:
+	rm -f ${SERVICES_GENERATED}
diff --git a/data/dbus/io.snapcraft.Launcher.service.in b/data/dbus/io.snapcraft.Launcher.service.in
new file mode 100644
index 000000000..cd65b0aa0
--- /dev/null
+++ b/data/dbus/io.snapcraft.Launcher.service.in
@@ -0,0 +1,3 @@
+[D-BUS Service]
+Name=io.snapcraft.Launcher
+Exec=@bindir@/snap userd
diff --git a/interfaces/builtin/unity7.go b/interfaces/builtin/unity7.go
index c33075942..135c578cc 100644
--- a/interfaces/builtin/unity7.go
+++ b/interfaces/builtin/unity7.go
@@ -88,12 +88,23 @@ const unity7ConnectedPlugAppArmor = `
 /usr/bin/xdg-open ixr,
 /usr/share/applications/{,*} r,
 /usr/bin/dbus-send ixr,
+
+# This allow access to the first version of the snapd-xdg-open
+# version which was shipped outside of snapd
 dbus (send)
     bus=session
     path=/
     interface=com.canonical.SafeLauncher
     member=OpenURL
     peer=(label=unconfined),
+# ... and this allows access to the new xdg-open service which
+# is now part of snapd itself.
+dbus (send)
+    bus=session
+    path=/io/snapcraft/Launcher
+    interface=io.snapcraft.Launcher
+    member=OpenURL
+    peer=(label=unconfined),
 
 # input methods (ibus)
 # subset of ibus abstraction
@@ -305,6 +316,11 @@ dbus (send)
     bus=session
     interface=com.canonical.SafeLauncher.OpenURL
     peer=(label=unconfined),
+# new url helper (part of snap userd)
+dbus (send)
+    bus=session
+    interface=io.snapcraft.Launcher.OpenURL
+    peer=(label=unconfined),
 
 # dbusmenu
 dbus (send)
diff --git a/testutil/dbustest.go b/testutil/dbustest.go
new file mode 100644
index 000000000..4f7b5f580
--- /dev/null
+++ b/testutil/dbustest.go
@@ -0,0 +1,69 @@
+// -*- Mode: Go; indent-tabs-mode: t -*-
+
+/*
+ * Copyright (C) 2015 Canonical Ltd
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+package testutil
+
+import (
+	"fmt"
+	"os"
+	"os/exec"
+
+	"github.com/godbus/dbus"
+
+	. "gopkg.in/check.v1"
+)
+
+// DBusTest provides a separate dbus session bus for running tests
+type DBusTest struct {
+	tmpdir           string
+	dbusDaemon       *exec.Cmd
+	oldSessionBusEnv string
+
+	// the dbus.Conn to the session bus that tests can use
+	SessionBus *dbus.Conn
+}
+
+func (s *DBusTest) SetUpSuite(c *C) {
+	if _, err := exec.LookPath("dbus-daemon"); err != nil {
+		c.Skip(fmt.Sprintf("cannot run test without dbus-daemon: %s", err))
+		return
+	}
+	if _, err := exec.LookPath("dbus-launch"); err != nil {
+		c.Skip(fmt.Sprintf("cannot run test without dbus-launch: %s", err))
+		return
+	}
+
+	s.tmpdir = c.MkDir()
+	s.dbusDaemon = exec.Command("dbus-daemon", "--session", fmt.Sprintf("--address=unix:%s/user_bus_socket", s.tmpdir))
+	err := s.dbusDaemon.Start()
+	c.Assert(err, IsNil)
+	s.oldSessionBusEnv = os.Getenv("DBUS_SESSION_BUS_ADDRESS")
+
+	s.SessionBus, err = dbus.SessionBus()
+	c.Assert(err, IsNil)
+}
+
+func (s *DBusTest) TearDownSuite(c *C) {
+	os.Setenv("DBUS_SESSION_BUS_ADDRESS", s.oldSessionBusEnv)
+	if s.dbusDaemon != nil && s.dbusDaemon.Process != nil {
+		err := s.dbusDaemon.Process.Kill()
+		c.Assert(err, IsNil)
+	}
+
+}
diff --git a/userd/launcher.go b/userd/launcher.go
new file mode 100644
index 000000000..fc427e87b
--- /dev/null
+++ b/userd/launcher.go
@@ -0,0 +1,88 @@
+// -*- Mode: Go; indent-tabs-mode: t -*-
+
+/*
+ * Copyright (C) 2017 Canonical Ltd
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+package userd
+
+import (
+	"fmt"
+	"net/url"
+	"os/exec"
+
+	"github.com/godbus/dbus"
+	"github.com/snapcore/snapd/strutil"
+)
+
+const launcherIntrospectionXML = `
+<interface name="org.freedesktop.DBus.Peer">
+	<method name='Ping'>
+	</method>
+	<method name='GetMachineId'>
+               <arg type='s' name='machine_uuid' direction='out'/>
+	</method>
+</interface>
+<interface name='io.snapcraft.Launcher'>
+	<method name='OpenURL'>
+		<arg type='s' name='url' direction='in'/>
+	</method>
+</interface>`
+
+var (
+	allowedURLSchemes = []string{"http", "https", "mailto"}
+)
+
+// Launcher implements the 'io.snapcraft.Launcher' DBus interface.
+type Launcher struct{}
+
+// Name returns the name of the interface this object implements
+func (s *Launcher) Name() string {
+	return "io.snapcraft.Launcher"
+}
+
+// IntrospectionData gives the XML formatted introspection description
+// of the DBus service.
+func (s *Launcher) IntrospectionData() string {
+	return launcherIntrospectionXML
+}
+
+func makeAccessDeniedError(err error) *dbus.Error {
+	return &dbus.Error{
+		Name: "org.freedesktop.DBus.Error.AccessDenied",
+		Body: []interface{}{err.Error()},
+	}
+}
+
+// OpenURL implements the 'OpenURL' method of the 'com.canonical.Launcher'
+// DBus interface. Before the provided url is passed to xdg-open the scheme is
+// validated against a list of allowed schemes. All other schemes are denied.
+func (s *Launcher) OpenURL(addr string) *dbus.Error {
+	u, err := url.Parse(addr)
+	if err != nil {
+		return &dbus.ErrMsgInvalidArg
+	}
+
+	if !strutil.ListContains(allowedURLSchemes, u.Scheme) {
+		return makeAccessDeniedError(fmt.Errorf("Supplied URL scheme %q is not allowed", u.Scheme))
+	}
+
+	if err = exec.Command("xdg-open", addr).Run(); err != nil {
+		return dbus.MakeFailedError(fmt.Errorf("cannot open supplied URL"))
+	}
+
+	return nil
+}
diff --git a/userd/launcher_test.go b/userd/launcher_test.go
new file mode 100644
index 000000000..acc174243
--- /dev/null
+++ b/userd/launcher_test.go
@@ -0,0 +1,81 @@
+// -*- Mode: Go; indent-tabs-mode: t -*-
+
+/*
+ * Copyright (C) 2017 Canonical Ltd
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+package userd_test
+
+import (
+	"github.com/godbus/dbus"
+
+	. "gopkg.in/check.v1"
+
+	"github.com/snapcore/snapd/testutil"
+	"github.com/snapcore/snapd/userd"
+)
+
+type launcherSuite struct {
+	launcher *userd.Launcher
+
+	mockXdgOpen *testutil.MockCmd
+}
+
+var _ = Suite(&launcherSuite{})
+
+func (s *launcherSuite) SetUpTest(c *C) {
+	s.launcher = &userd.Launcher{}
+	s.mockXdgOpen = testutil.MockCommand(c, "xdg-open", "")
+}
+
+func (s *launcherSuite) TearDownTest(c *C) {
+	s.mockXdgOpen.Restore()
+}
+
+func (s *launcherSuite) TestOpenURLWithNotAllowedScheme(c *C) {
+	for _, t := range []struct {
+		url        string
+		errMatcher string
+	}{
+		{"tel://049112233445566", "Supplied URL scheme \"tel\" is not allowed"},
+		{"aabbccdd0011", "Supplied URL scheme \"\" is not allowed"},
+		{"invälid:%url", dbus.ErrMsgInvalidArg.Error()},
+	} {
+		err := s.launcher.OpenURL(t.url)
+		c.Assert(err, ErrorMatches, t.errMatcher)
+		c.Assert(s.mockXdgOpen.Calls(), IsNil)
+	}
+}
+
+func (s *launcherSuite) TestOpenURLWithAllowedSchemeHappy(c *C) {
+	for _, schema := range []string{"http", "https", "mailto"} {
+		err := s.launcher.OpenURL(schema + "://snapcraft.io")
+		c.Assert(err, IsNil)
+		c.Assert(s.mockXdgOpen.Calls(), DeepEquals, [][]string{
+			{"xdg-open", schema + "://snapcraft.io"},
+		})
+		s.mockXdgOpen.ForgetCalls()
+	}
+}
+
+func (s *launcherSuite) TestOpenURLWithFailingXdgOpen(c *C) {
+	cmd := testutil.MockCommand(c, "xdg-open", "false")
+	defer cmd.Restore()
+
+	err := s.launcher.OpenURL("https://snapcraft.io")
+	c.Assert(err, NotNil)
+	c.Assert(err, ErrorMatches, "cannot open supplied URL")
+}
diff --git a/userd/userd.go b/userd/userd.go
new file mode 100644
index 000000000..d17018e62
--- /dev/null
+++ b/userd/userd.go
@@ -0,0 +1,109 @@
+// -*- Mode: Go; indent-tabs-mode: t -*-
+
+/*
+ * Copyright (C) 2017 Canonical Ltd
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+package userd
+
+import (
+	"bytes"
+	"fmt"
+
+	"github.com/godbus/dbus"
+	"github.com/godbus/dbus/introspect"
+	"gopkg.in/tomb.v2"
+)
+
+const (
+	busName  = "io.snapcraft.Launcher"
+	basePath = "/io/snapcraft/Launcher"
+)
+
+type dbusInterface interface {
+	Name() string
+	IntrospectionData() string
+}
+
+type Userd struct {
+	tomb       tomb.Tomb
+	conn       *dbus.Conn
+	dbusIfaces []dbusInterface
+}
+
+func (ud *Userd) createAndExportInterfaces() {
+	ud.dbusIfaces = []dbusInterface{&Launcher{}}
+
+	var buffer bytes.Buffer
+	buffer.WriteString("<node>")
+
+	for _, iface := range ud.dbusIfaces {
+		ud.conn.Export(iface, basePath, iface.Name())
+		buffer.WriteString(iface.IntrospectionData())
+	}
+
+	buffer.WriteString(introspect.IntrospectDataString)
+	buffer.WriteString("</node>")
+
+	ud.conn.Export(introspect.Introspectable(buffer.String()), basePath, "org.freedesktop.DBus.Introspectable")
+}
+
+func (ud *Userd) Init() error {
+	var err error
+
+	ud.conn, err = dbus.SessionBus()
+	if err != nil {
+		return err
+	}
+
+	reply, err := ud.conn.RequestName(busName, dbus.NameFlagDoNotQueue)
+	if err != nil {
+		return err
+	}
+
+	if reply != dbus.RequestNameReplyPrimaryOwner {
+		err = fmt.Errorf("cannot obtain bus name '%s'", busName)
+		return err
+	}
+
+	ud.createAndExportInterfaces()
+	return nil
+}
+
+func (ud *Userd) Start() {
+	ud.tomb.Go(func() error {
+		// Listen to keep our thread up and running. All DBus bits
+		// are running in the background
+		select {
+		case <-ud.tomb.Dying():
+			ud.conn.Close()
+		}
+		err := ud.tomb.Err()
+		if err != nil && err != tomb.ErrStillAlive {
+			return err
+		}
+		return nil
+	})
+}
+
+func (ud *Userd) Stop() error {
+	ud.tomb.Kill(nil)
+	return ud.tomb.Wait()
+}
+
+func (ud *Userd) Dying() <-chan struct{} {
+	return ud.tomb.Dying()
+}
diff --git a/vendor/vendor.json b/vendor/vendor.json
index 8715a0db5..c8e3aa756 100644
--- a/vendor/vendor.json
+++ b/vendor/vendor.json
@@ -19,10 +19,16 @@
 			"revisionTime": "2014-05-03T19:37:39Z"
 		},
 		{
-			"checksumSHA1": "LIpi0bDVAl3e0Xza8gohpKkH0+I=",
+			"checksumSHA1": "h77tT8kVh8x/J5ikkZReONPUjU0=",
 			"path": "github.com/godbus/dbus",
-			"revision": "bd29ed602e2cf4207ebcabcd530259169e4289ba",
-			"revisionTime": "2017-07-07T17:46:28Z"
+			"revision": "97646858c46433e4afb3432ad28c12e968efa298",
+			"revisionTime": "2017-08-22T15:24:03Z"
+		},
+		{
+			"checksumSHA1": "NrP46FPoALgKz3FY6puL3syMAAI=",
+			"path": "github.com/godbus/dbus/introspect",
+			"revision": "97646858c46433e4afb3432ad28c12e968efa298",
+			"revisionTime": "2017-08-22T15:24:03Z"
 		},
 		{
 			"checksumSHA1": "iIUYZyoanCQQTUaWsu8b+iOSPt4=",
-- 
2.13.5

